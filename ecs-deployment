#!/bin/bash

# Test for missing ENV vars
if [[ -z $SQS_URL ]] ; then
    echo "SQS_URL is not set. You must specify Queue URL via ENV."
    exit 1
fi
if [[ -z $ECS_CLUSTER ]] ; then
    ECS_CLUSTER=default
fi
if [[ -z $ECS_TIMEOUT ]] ; then
    ECS_TIMEOUT=300
fi

# Define temp files
MSGFILE=newdef.msg
JSONFILE=newdef.json

# Enable Slack WebHook Notification if ENVs are set
SLACK_NOTIFY=false
if ! [[ -z $SLACK_WEBHOOK ]] ; then
    SLACK_NOTIFY=true
    if [[ -z $SLACK_CHANNEL ]] ; then SLACK_NOTIFY=false ; fi
    if [[ -z $SLACK_BOTNAME ]] ; then SLACK_BOTNAME="ecs-deployment" ; fi
    if [[ -z $SLACK_COLOR ]] ; then SLACK_COLOR="#335EFF" ; fi
fi

# Failure function
failure () {
    ERROR_MGS="$1"
    echo "ERROR: ${ERROR_MGS}"
    if [[ $SLACK_NOTIFY == "true" ]] ; then 
        SLACK_PRETEXT="ECS Deployment Failure:"
        SLACK_MESSAGE="${ERROR_MGS}!"
        SLACK_COLOR="#FF0000"
        echo "Posting Slack Notification to WebHook: $SLACK_WEBHOOK";
        SLACK_PAYLOAD="payload={\"channel\": \"${SLACK_CHANNEL}\", \"username\": \"${SLACK_BOTNAME}\", \"attachments\":[{\"fallback\":\"${SLACK_PRETEXT} ${SLACK_MESSAGE}\", \"pretext\":\":fire::fire:*${SLACK_PRETEXT} ${SLACK_MESSAGE}*:fire::fire:\", \"color\":\"${SLACK_COLOR}\", \"mrkdwn_in\":[\"text\", \"pretext\"], \"fields\":[{\"title\":\"Service\", \"value\":\"${SERVICE}\", \"short\":false}, {\"title\":\"Error Mesage\", \"value\":\"${ERROR_MGS}\", \"short\":false}]}] }"
        CURL_RESULT=`curl -s -S -X POST --data-urlencode "$SLACK_PAYLOAD" $SLACK_WEBHOOK`
    fi
    if [[ $RECEIPT == "null" ]] || [[ -z $RECEIPT ]] ; then
        return 0
    else
        echo "Removing SQS message: $RECEIPT";
        DEL_SQS_MSG=`aws sqs delete-message --queue-url $SQS_URL --receipt-handle $RECEIPT`
        return 0
    fi
}


# Fetch new message from SQS
echo "Fetching SQS Message from Queue: $SQS_URL";
aws sqs receive-message --queue-url $SQS_URL --message-attribute-names All --visibility-timeout 300 > $MSGFILE

# Check new message is not empty
if ! [[ -s $MSGFILE ]] ; then echo "SQS Queue was empty (or Receive Message failed)." && exit 1; fi


# Get message ID (test for valid sqs json)
MSGID=`jq < $MSGFILE '.Messages[0]|.MessageId' |tr -d '"'`
if [[ $MSGID == "null" ]] || [[ -z $MSGID ]] ; then failure "SQS Message malformed (Msg ID not found)" && exit 1; fi
echo "SQS Message ID: $MSGID";

# Get message receipt handle (for deletion)
RECEIPT=`jq < $MSGFILE '.Messages[0]|.ReceiptHandle' |tr -d '"'`
if [[ $RECEIPT == "null" ]] || [[ -z $RECEIPT ]] ; then failure "SQS Message malformed (Receipt Handle not found)" && exit 1; fi
echo "SQS Message Receipt Handle: $RECEIPT";

# Get service name from message attribute
SERVICE=`jq < $MSGFILE '.Messages[0]|.MessageAttributes|.service|.StringValue' |tr -d '"'`
if [[ $SERVICE == "null" ]] || [[ -z $SERVICE ]] ; then failure "SQS Message malformed (Service attribute missing)" && exit 1; fi

# Get commit url from message attribute (if included)
COMMIT_URL=`jq < $MSGFILE '.Messages[0]|.MessageAttributes|.commit_url|.StringValue' |tr -d '"'`
if [[ $COMMIT_URL == "null" ]] || [[ -z $COMMIT_URL ]] ; then COMMIT_URL="false" && echo "Commit URL not included."; fi

# Extract task definition to json file
jq < $MSGFILE '.Messages[0]|.Body' |sed -e 's/"{/{/' |sed -e 's/}\\n"/}\\n/' |sed -e 's/}"/}/' | sed -e 's/\\\"/\"/g' | sed -e 's/\\"/"/g' |sed -e 's/\\n/\n/g' > $JSONFILE
if ! [[ -s $JSONFILE ]] ; then failure "Task Def JSON is empty" && exit 1; fi
echo "New task definition for service: $SERVICE";


# Run some sanity checks on new task definition
NEW_TASK_FAMILY=`jq < $JSONFILE '.family'`
if [[ $NEW_TASK_FAMILY == "null" ]] || [[ -z $NEW_TASK_FAMILY ]] ; then failure "Task Definition malformed (Family not found)" && exit 1; fi
NEW_TASK_CONTAINERS=`jq < $JSONFILE '.containerDefinitions'`
if [[ $NEW_TASK_CONTAINERS == "null" ]] || [[ -z $NEW_TASK_CONTAINERS ]] ; then failure "Task Definition malformed (Containers not found)" && exit 1; fi
NEW_TASK_VOLUMES=`jq < $JSONFILE '.volumes'`
if [[ $NEW_TASK_VOLUMES == "null" ]] || [[ -z $NEW_TASK_VOLUMES ]] ; then failure "Task Definition malformed (Volumes not found)" && exit 1; fi


# Check service exists (if provided) and get current task definition name and task count
if ! [[ $SERVICE == "false" ]] ; then
    CURRENT_TASK_ARN=`aws ecs describe-services --services $SERVICE --cluster $ECS_CLUSTER | jq .services[0].taskDefinition | tr -d '"'`
    if [[ $CURRENT_TASK_ARN == "null" ]] || [[ -z $CURRENT_TASK_ARN ]] ; then failure "Service ${SERVICE} not found" && exit 1; fi
    CURRENT_TASK=`echo ${CURRENT_TASK_ARN} |cut -d':' -f6-7 |cut -d'/' -f2`
    echo "Current task definition: $CURRENT_TASK";
    
    DESIRED_TASK_COUNT=`aws ecs describe-services --services $SERVICE --cluster $ECS_CLUSTER | jq .services[0].desiredCount `
    if [[ $DESIRED_TASK_COUNT == "null" ]] || [[ -z $DESIRED_TASK_COUNT ]] ; then failure "Service ${SERVICE} TASK COUNT not found" && exit 1; fi
    echo "Service task count: $DESIRED_TASK_COUNT";
fi


# Register the new task definition, and store its ARN
echo "Registering new task definition ...";
NEW_TASKDEF_ARN=`aws ecs register-task-definition --cli-input-json file://$JSONFILE | jq .taskDefinition.taskDefinitionArn | tr -d '"'`
if [[ $NEW_TASKDEF_ARN == "null" ]] || [[ -z $NEW_TASKDEF_ARN ]] ; then failure "Task definition registration failed for ${SERVICE}" && exit 1; fi
NEW_TASKDEF=`echo ${NEW_TASKDEF_ARN} |cut -d':' -f6-7 |cut -d'/' -f2`
NEW_TASKDEF_NAME=`echo ${NEW_TASKDEF} |cut -d':' -f1`
NEW_TASKDEF_REV=`echo ${NEW_TASKDEF} |cut -d':' -f2`
echo "New task definition registered: $NEW_TASKDEF";

# Remove SQS Message
echo "Removing SQS message: $RECEIPT";
DEL_SQS_MSG=`aws sqs delete-message --queue-url $SQS_URL --receipt-handle $RECEIPT`
RECEIPT=""

# Setup vars for Slack Notification
AWS_REGION=`echo ${NEW_TASKDEF_ARN} |cut -d':' -f4`
SERVICE_URL="https://${AWS_REGION}.console.aws.amazon.com/ecs/home?region=${AWS_REGION}#/clusters/${ECS_CLUSTER}/services/${SERVICE}/tasks"
TASKDEF_URL="https://${AWS_REGION}.console.aws.amazon.com/ecs/home?region=${AWS_REGION}#/taskDefinitions/${NEW_TASKDEF_NAME}/${NEW_TASKDEF_REV}"
SLACK_PRETEXT="ECS Deployment:"
SLACK_MESSAGE="Registered new Task Definition <${TASKDEF_URL}|${NEW_TASKDEF}>"


# Add Github Commit link if provided
if ! [[ $COMMIT_URL == "false" ]] ; then
    COMMIT_ID=`echo ${COMMIT_URL} |sed 's/.*\/\(.*\)$/\1/'`
    SLACK_MESSAGE="${SLACK_MESSAGE} \nCommit ID: <${COMMIT_URL}|${COMMIT_ID}>"
fi

# Update the service (if specified)
if [[ $SERVICE == "false" ]] ; then
    echo "Service set to FALSE";
else 
    echo "Updating service: $SERVICE";
    UPDATE=`aws ecs update-service --cluster $ECS_CLUSTER --service $SERVICE --task-definition $NEW_TASKDEF_ARN`
    SLACK_MESSAGE="Starting Service Update of <${SERVICE_URL}|${SERVICE}> with new Task Definition <${TASKDEF_URL}|${NEW_TASKDEF}>"
fi

# Send Slack Notification (if enabled)
if [[ $SLACK_NOTIFY == "true" ]] ; then
    echo "Posting Slack Notification to WebHook: $SLACK_WEBHOOK";
    SLACK_PAYLOAD="payload={\"channel\": \"${SLACK_CHANNEL}\", \"username\": \"${SLACK_BOTNAME}\", \"attachments\":[{\"fallback\":\"${SLACK_PRETEXT} ${SLACK_MESSAGE}\", \"color\":\"${SLACK_COLOR}\", \"mrkdwn_in\":[\"text\", \"pretext\"], \"fields\":[{\"title\":\"${SLACK_PRETEXT}\", \"value\":\"${SLACK_MESSAGE}\", \"short\":false}]}] }"
    CURL_RESULT=`curl -s -S -X POST --data-urlencode "$SLACK_PAYLOAD" $SLACK_WEBHOOK`
fi

# Exit now if no service update to wait for (or desired task count is zero)
if [[ $SERVICE == "false" ]] || [ $DESIRED_TASK_COUNT -lt 1 ] ; then
    echo "Success, new task definition registered.";
    exit 0
fi


# See if the service is able to come up again
echo "Waiting for service update to complete ...";
every=10
i=0
while [ $i -lt $ECS_TIMEOUT ] 
do
  # Scan the list of running tasks for that service, and see if one of them is the
  # new version of the task definition
  rm -f tasks
  
  aws ecs list-tasks --cluster $ECS_CLUSTER  --service-name $SERVICE --desired-status RUNNING \
    | jq '.taskArns[]' \
    | xargs -I{} aws ecs describe-tasks --cluster $ECS_CLUSTER --tasks {} >> tasks
  
  jq < tasks > results ".tasks[]| if .taskDefinitionArn == \"$NEW_TASKDEF_ARN\" then . else empty end|.lastStatus"
  
  RUNNING=`grep -e "RUNNING" results`

  if ! [[ -z $RUNNING ]]; then
    echo "Service updated successfully, new task definition running.";
    SLACK_PRETEXT="ECS Service Update Successful:"
    SLACK_MESSAGE="Completed Service Update of <${SERVICE_URL}|${SERVICE}> with new Task Definition <${TASKDEF_URL}|${NEW_TASKDEF}>"

	# Send Slack Notification (if enabled)
	if [[ $SLACK_NOTIFY == "true" ]] ; then
	    echo "Posting Slack Notification to WebHook: $SLACK_WEBHOOK";
	    SLACK_PAYLOAD="payload={\"channel\": \"${SLACK_CHANNEL}\", \"username\": \"${SLACK_BOTNAME}\", \"attachments\":[{\"fallback\":\"${SLACK_PRETEXT} ${SLACK_MESSAGE}\", \"color\":\"${SLACK_COLOR}\", \"mrkdwn_in\":[\"text\", \"pretext\"], \"fields\":[{\"title\":\"${SLACK_PRETEXT}\", \"value\":\"${SLACK_MESSAGE}\", \"short\":false}]}] }"
	    CURL_RESULT=`curl -s -S -X POST --data-urlencode "$SLACK_PAYLOAD" $SLACK_WEBHOOK`
	fi

    exit 0
  fi
  
  sleep $every
  i=$(( $i + $every ))
done

# Timeout
failure "New task definition for ${SERVICE} NOT RUNNING within ${ECS_TIMEOUT} seconds"
exit 1
